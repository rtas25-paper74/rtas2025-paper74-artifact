<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>/*
*  --------- BEGIN CONFIGURATION SECTION
*/
const bool Periodic = true;

const int MaxTime = 101; // max period + 1
typedef int[0,MaxTime] time_t;

const int Tasks = 4;                 // Number of tasks
typedef int[0,Tasks-1] t_id;

const int Procs = 1;                 // Number of resources
typedef int[0,Procs-1] r_id;

typedef struct { 
  time_t initial_offset;
  time_t min_period;
  time_t max_period;
  time_t offset;
  time_t deadline;
  time_t bcet;
  time_t wcet;
  r_id resource;
  int pri;
  int enabled;  
} task_t;

// TODO: fully-preemptive, so combine chains into a single callback

//init_offset, min_period, max_period, offset, deadline, bcet, wcet, resource, priority, enabled
const int focused_task = 0;
//*
task_t task[Tasks] = {
{0,100, 100,0,100,  15,  15, 0, 1, 1}, // driver
{0,40,  40,0,  40, 21, 21, 0, 1, 1},   // dummy0
{0,30,  30,0,  30,  8,  8, 0, 1, 1},   // dummy1 
{0,25,  25,0,  25,  1,  1, 0, 1, 1}    // health
};
//*/



clock response_time[Tasks];
clock response_sum[Tasks];
clock runtimes[Tasks];


typedef struct {
  int[0,Tasks] length;
  t_id element[Tasks];
} buffer_t; 

buffer_t buffer[Procs];

const int Policies  = 3;
const int EDF  		= 0;
const int FIFO 		= 1;
const int FPS  		= 2;

chan inserted, insert_task[Policies];
typedef int[0,Policies-1] policy_t;

/*
* Task graph definition of dependencies
*
* Meaning of Depend[i][j]:
*    - 0/false : task i does not depend on task j
*    - 1/true  : task i depends on task j
*/
const bool Depend[Tasks][Tasks] = {  // Task graph
{0,0,0,0},
{0,0,0,0},
{0,0,0,0},
{0,0,0,0}
};


/*
*  --------- END CONFIGURATION SECTION
*/
clock time[Tasks];//, exec[Tasks];


bool complete[Tasks];


urgent chan ready[Procs];
chan finished[Tasks];//run[Procs+1], stop[Procs], done[Procs];


meta struct {
  meta t_id task;
  meta r_id resource;
  meta bool preempt;
} param;

void setParams(t_id t, r_id r, bool preempt) {
  param.task = t; param.resource = r; param.preempt = preempt;
}

t_id ready_task;

void insert_at(int[0,Tasks] pos, t_id tid, r_id rid) {
  int i;
  for(i = buffer[rid].length; i &gt; pos; i--) {
    buffer[rid].element[i] = buffer[rid].element[i-1];
  }
  buffer[rid].element[pos] = tid;
  buffer[rid].length++;

}

urgent chan disturbed;


clock time_between_idle;
clock time_spent_idle;
</declaration>
	<template>
		<name>Resource</name>
		<parameter>const r_id id, bool preemptive, policy_t policy</parameter>
		<declaration>
void removeTask() {
  int i = 0;
  buffer[id].length--;
  do {
    buffer[id].element[i] = buffer[id].element[i+1];
    i++;
  } while (i &lt; buffer[id].length);
  buffer[id].element[buffer[id].length] = 0;
}

t_id front() { return buffer[id].element[0]; }

bool empty() {
  return buffer[id].length == 0;
}</declaration>
		<location id="id0" x="-869" y="-203">
			<committed/>
		</location>
		<location id="id1" x="-772" y="-231">
			<committed/>
		</location>
		<location id="id2" x="-492" y="-231">
			<committed/>
		</location>
		<location id="id3" x="-932" y="-279">
			<committed/>
		</location>
		<location id="id4" x="-884" y="-119">
			<name x="-900" y="-103">InUse</name>
		</location>
		<location id="id5" x="-772" y="-279">
			<name x="-788" y="-311">Idle</name>
			<label kind="invariant" x="-742" y="-305">time_between_idle' == 0 &amp;&amp;
time_spent_idle' == 1</label>
		</location>
		<init ref="id5"/>
		<transition id="id6">
			<source ref="id0"/>
			<target ref="id4"/>
		</transition>
		<transition id="id7">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-851" y="-234">inserted?</label>
		</transition>
		<transition id="id8">
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="guard" x="-580" y="-207">empty()</label>
			<label kind="assignment" x="-748" y="-191">insert_at(0,ready_task,id)</label>
			<nail x="-540" y="-175"/>
			<nail x="-812" y="-175"/>
		</transition>
		<transition id="id9">
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="guard" x="-740" y="-247">!empty()</label>
			<label kind="synchronisation" x="-668" y="-247">insert_task[policy]!</label>
			<label kind="assignment" x="-756" y="-231">setParams(ready_task,id,preemptive)</label>
		</transition>
		<transition id="id10">
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-1044" y="-175">finished[front()]?</label>
			<label kind="assignment" x="-1028" y="-207">removeTask()</label>
			<nail x="-932" y="-119"/>
		</transition>
		<transition id="id11">
			<source ref="id4"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-564" y="-143">ready[id]?</label>
			<nail x="-492" y="-119"/>
		</transition>
		<transition id="id12">
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="-908" y="-239">!empty()</label>
			<nail x="-916" y="-247"/>
			<nail x="-916" y="-151"/>
		</transition>
		<transition id="id13">
			<source ref="id3"/>
			<target ref="id5"/>
			<label kind="guard" x="-909" y="-306">empty()</label>
			<label kind="assignment" x="-929" y="-348">time_between_idle := 0,
time_spent_idle:= 0</label>
		</transition>
		<transition id="id14">
			<source ref="id5"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-564" y="-279">ready[id]?</label>
			<nail x="-492" y="-279"/>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Task</name>
		<parameter>const t_id id</parameter>
		<declaration>clock x;

bool dependencies_met() {
  return forall (j : t_id)  Depend[id][j] imply complete[j];
}

void completed() {
  complete[id] = true;
}

void new_period() {
//  int i = 0;
//  for ( i  = 0; i &lt; Tasks; i++) {
//    complete[i] = false;
//  }
  complete[id] = false;
}

time_t initialOffset() { return task[id].initial_offset; }
time_t minPeriod() { return task[id].min_period; }
time_t maxPeriod() { return task[id].max_period; }
time_t offset() { return task[id].offset; }
time_t deadline() { return task[id].deadline; }
time_t BCET() { return task[id].bcet; }
time_t WCET() { return task[id].wcet; }
time_t resource() { return task[id].resource; }
time_t priotiry() { return task[id].pri; }
time_t enabled() {return task[id].enabled; }

int[0,1] isRunning() {
  return (buffer[resource()].element[0] == id? 1 : 0);
}


</declaration>
		<location id="id15" x="341" y="-235">
			<name x="331" y="-269">Error2</name>
		</location>
		<location id="id16" x="-169" y="-99">
			<name x="-143" y="-107">Ready</name>
			<label kind="invariant" x="-135" y="-65">x' == isRunning() &amp;&amp;
x &lt;= WCET()</label>
		</location>
		<location id="id17" x="-279" y="-363">
			<label kind="invariant" x="-289" y="-346">x' == 0</label>
		</location>
		<location id="id18" x="-167" y="-309">
			<name x="-151" y="-325">WaitingDepedency</name>
			<label kind="invariant" x="-151" y="-309">x' == 0</label>
		</location>
		<location id="id19" x="-393" y="11">
			<name x="-409" y="-21">Done</name>
			<label kind="invariant" x="-417" y="27">x' == 0</label>
		</location>
		<location id="id20" x="-169" y="11">
			<committed/>
		</location>
		<location id="id21" x="-383" y="-365">
			<committed/>
		</location>
		<location id="id22" x="-383" y="-469">
			<name x="-391" y="-501">Initial</name>
			<label kind="invariant" x="-359" y="-485">x' == 0 &amp;&amp;
time[id] &lt;= initialOffset()</label>
		</location>
		<location id="id23" x="-391" y="-221" color="#ff0000">
			<name x="-407" y="-253">Error</name>
		</location>
		<location id="id24" x="-169" y="75">
			<name x="-153" y="67">PeriodDone</name>
			<label kind="invariant" x="-225" y="91">x' == 0 &amp;&amp;
time[id] &lt;= maxPeriod()</label>
		</location>
		<location id="id25" x="-167" y="-229">
			<name x="-127" y="-252">PreReady</name>
			<label kind="invariant" x="-143" y="-227">x' == isRunning() &amp;&amp;
x &lt;= 1</label>
		</location>
		<location id="id26" x="-167" y="-365">
			<name x="-191" y="-397">WaitingOffset</name>
			<label kind="invariant" x="-143" y="-381">x' == 0 &amp;&amp;
time[id] &lt;= offset()</label>
		</location>
		<init ref="id22"/>
		<transition id="id27">
			<source ref="id16"/>
			<target ref="id15"/>
			<label kind="guard" x="-151" y="-201">response_time[id] &gt; 2 * deadline()</label>
		</transition>
		<transition id="id28">
			<source ref="id25"/>
			<target ref="id15"/>
			<label kind="guard" x="77" y="-210">response_time[id] &gt; 2 * deadline()</label>
		</transition>
		<transition id="id29">
			<source ref="id16"/>
			<target ref="id20"/>
			<label kind="guard" x="-135" y="-31">x &gt;= BCET()</label>
			<label kind="synchronisation" x="-135" y="-14">finished[id]!</label>
			<label kind="assignment" x="-135" y="3">completed()</label>
		</transition>
		<transition id="id30">
			<source ref="id16"/>
			<target ref="id23"/>
			<label kind="guard" x="-398" y="-133">time[id] &gt; deadline()</label>
		</transition>
		<transition id="id31">
			<source ref="id25"/>
			<target ref="id16"/>
			<label kind="guard" x="-168" y="-198">x ==1</label>
			<label kind="assignment" x="-135" y="-176">response_sum[id] := response_time[id],
response_time[id] = 1</label>
		</transition>
		<transition id="id32">
			<source ref="id21"/>
			<target ref="id26"/>
			<label kind="guard" x="-365" y="-368">enabled()</label>
			<label kind="assignment" x="-398" y="-329">time[id] = 0, x = 0,
new_period()</label>
			<nail x="-279" y="-329"/>
		</transition>
		<transition id="id33">
			<source ref="id17"/>
			<target ref="id26"/>
			<label kind="guard" x="-261" y="-398">enabled()</label>
			<label kind="assignment" x="-254" y="-431">time[id] = 0, x = 0,
new_period()</label>
		</transition>
		<transition id="id34">
			<source ref="id21"/>
			<target ref="id17"/>
			<label kind="guard" x="-365" y="-398">!enabled()</label>
		</transition>
		<transition id="id35">
			<source ref="id26"/>
			<target ref="id18"/>
			<label kind="guard" x="-159" y="-349">time[id] == offset()</label>
		</transition>
		<transition id="id36">
			<source ref="id20"/>
			<target ref="id19"/>
			<label kind="guard" x="-249" y="-13">!Periodic</label>
		</transition>
		<transition id="id37">
			<source ref="id20"/>
			<target ref="id24"/>
			<label kind="guard" x="-161" y="27">Periodic</label>
		</transition>
		<transition id="id38">
			<source ref="id22"/>
			<target ref="id21"/>
			<label kind="guard" x="-375" y="-437">time[id] == initialOffset()</label>
			<label kind="assignment" x="-594" y="-422">response_sum[id] = 0,
response_time[id] = 0</label>
		</transition>
		<transition id="id39">
			<source ref="id24"/>
			<target ref="id21"/>
			<label kind="guard" x="-425" y="51">time[id] &gt;= minPeriod()</label>
			<nail x="-433" y="75"/>
			<nail x="-431" y="-365"/>
		</transition>
		<transition id="id40">
			<source ref="id25"/>
			<target ref="id23"/>
			<label kind="guard" x="-367" y="-237">time[id] &gt; deadline()</label>
		</transition>
		<transition id="id41">
			<source ref="id18"/>
			<target ref="id25"/>
			<label kind="guard" x="-159" y="-293">dependencies_met()</label>
			<label kind="synchronisation" x="-159" y="-277">ready[resource()]!</label>
			<label kind="assignment" x="-8" y="-269">ready_task = id</label>
		</transition>
	</template>
	<template>
		<name>Policy_FIFO</name>
		<location id="id42" x="-176" y="-128">
			<committed/>
		</location>
		<location id="id43" x="-176" y="-248">
		</location>
		<init ref="id43"/>
		<transition id="id44">
			<source ref="id42"/>
			<target ref="id43"/>
			<label kind="synchronisation" x="-256" y="-128">inserted!</label>
			<nail x="-224" y="-128"/>
			<nail x="-224" y="-248"/>
		</transition>
		<transition id="id45">
			<source ref="id43"/>
			<target ref="id42"/>
			<label kind="synchronisation" x="-168" y="-232">insert_task[FIFO]?</label>
			<label kind="assignment" x="-168" y="-200">insert_at(buffer[param.resource].length,
	param.task,
	param.resource)</label>
		</transition>
	</template>
	<template>
		<name>Policy_FPS</name>
		<declaration>
void insert_task_in_buffer() {
  t_id t = param.task;
  r_id r = param.resource;
  int place = (param.preempt ? 0 : 1);
  int i;
  // Find out where to put the task
  while ( place &lt; buffer[r].length &amp;&amp; task[buffer[r].element[place]].pri &gt;= task[t].pri ) {
    place++;
  }
  insert_at(place,t,r);
}</declaration>
		<location id="id46" x="-176" y="-144">
			<committed/>
		</location>
		<location id="id47" x="-176" y="-248">
		</location>
		<init ref="id47"/>
		<transition id="id48">
			<source ref="id46"/>
			<target ref="id47"/>
			<label kind="synchronisation" x="-256" y="-144">inserted!</label>
			<nail x="-216" y="-144"/>
			<nail x="-216" y="-248"/>
		</transition>
		<transition id="id49">
			<source ref="id47"/>
			<target ref="id46"/>
			<label kind="synchronisation" x="-168" y="-224">insert_task[FPS]?</label>
			<label kind="assignment" x="-168" y="-192">insert_task_in_buffer()</label>
		</transition>
	</template>
	<template>
		<name>Policy_EDF</name>
		<declaration>int[0,Tasks] place;
t_id tid;
r_id rid;
bool preempt;

void readParameters() {
  tid = param.task; rid = param.resource; preempt = param.preempt;
}

void resetVars() {
  place = tid = rid = 0;
}</declaration>
		<location id="id50" x="-119" y="-187">
			<committed/>
		</location>
		<location id="id51" x="-119" y="-323">
			<committed/>
		</location>
		<location id="id52" x="-119" y="-443">
		</location>
		<init ref="id52"/>
		<transition id="id53">
			<source ref="id50"/>
			<target ref="id52"/>
			<label kind="synchronisation" x="-231" y="-235">inserted!</label>
			<label kind="assignment" x="-247" y="-291">resetVars()</label>
			<nail x="-167" y="-187"/>
			<nail x="-167" y="-443"/>
		</transition>
		<transition id="id54">
			<source ref="id51"/>
			<target ref="id51"/>
			<label kind="guard" x="-26" y="-366">place &lt; buffer[rid].length &amp;&amp;
time[tid]-task[tid].deadline &lt;=
time[buffer[rid].element[place]] - task[buffer[rid].element[place]].deadline</label>
			<label kind="assignment" x="-71" y="-315">place++</label>
			<nail x="-79" y="-339"/>
			<nail x="-79" y="-307"/>
		</transition>
		<transition id="id55">
			<source ref="id51"/>
			<target ref="id50"/>
			<label kind="guard" x="-26" y="-289">place == buffer[rid].length ||
time[tid]-task[tid].deadline &gt;=
time[buffer[rid].element[place]] - task[buffer[rid].element[place]].deadline</label>
			<label kind="assignment" x="-111" y="-235">insert_at(place,tid,rid)</label>
		</transition>
		<transition id="id56">
			<source ref="id52"/>
			<target ref="id51"/>
			<label kind="synchronisation" x="-111" y="-427">insert_task[EDF]?</label>
			<label kind="assignment" x="-111" y="-403">readParameters(),
place = (preempt ? 0 : 1)</label>
		</transition>
	</template>
	<system>

//Task id, res. ass., bcet, wcet, deadline, offset, period

P0  = Resource(0,true,EDF);
// P1  = Resource(1,true,FPS);
// Bus = Resource(2,false,FIFO);


system Task, P0, Policy_EDF;
//system Policy_EDF &lt; P0 &lt; Task;
//system Task, P0, Policy_EDF, Dist;</system>
	<queries>
		<option key="--search-order" value="1"/>
		<query>
			<formula>// Driver</formula>
			<comment/>
		</query>
		<query>
			<formula>sup{Task(0).Ready}: response_sum[0]</formula>
			<comment>Max time an event can go unrecognized - Reaction Time - Driver</comment>
			<result outcome="maybe_true" type="quantity" value="170" timestamp="2025-02-26 03:45:39 -0500">
				<option key="--search-order" value="1"/>
				<details>170</details>
			</result>
		</query>
		<query>
			<formula>sup{Task(0).Ready}: time[0]</formula>
			<comment>Latency - time between release and task completion</comment>
			<result outcome="maybe_true" type="quantity" value="94" timestamp="2025-02-26 03:45:48 -0500">
				<option key="--search-order" value="1"/>
				<details>94</details>
			</result>
		</query>
		<query>
			<formula>// Dummy0</formula>
			<comment/>
		</query>
		<query>
			<formula>sup{Task(1).Ready}: response_sum[1]</formula>
			<comment>Max time an event can go unrecognized - Reaction Time</comment>
			<result outcome="maybe_true" type="quantity" value="74" timestamp="2025-02-26 03:45:58 -0500">
				<option key="--search-order" value="1"/>
				<details>74</details>
			</result>
		</query>
		<query>
			<formula>sup{Task(1).Ready}: time[1]</formula>
			<comment/>
			<result outcome="maybe_true" type="quantity" value="34" timestamp="2025-02-26 03:46:08 -0500">
				<option key="--search-order" value="1"/>
				<details>34</details>
			</result>
		</query>
		<query>
			<formula>// Dummy1</formula>
			<comment/>
		</query>
		<query>
			<formula>sup{Task(2).Ready}: response_sum[2]</formula>
			<comment/>
			<result outcome="maybe_true" type="quantity" value="52" timestamp="2025-02-26 03:46:19 -0500">
				<option key="--search-order" value="1"/>
				<details>52</details>
			</result>
		</query>
		<query>
			<formula>sup{Task(2).Ready}: time[2]</formula>
			<comment/>
			<result outcome="maybe_true" type="quantity" value="24" timestamp="2025-02-26 03:46:29 -0500">
				<option key="--search-order" value="1"/>
				<details>24</details>
			</result>
		</query>
		<query>
			<formula>// Health check</formula>
			<comment/>
		</query>
		<query>
			<formula>sup{Task(3).Ready}: response_sum[3]</formula>
			<comment/>
			<result outcome="maybe_true" type="quantity" value="44" timestamp="2025-02-26 03:46:40 -0500">
				<option key="--search-order" value="1"/>
				<details>44</details>
			</result>
		</query>
		<query>
			<formula>sup{Task(3).Ready}: time[3]</formula>
			<comment/>
			<result outcome="maybe_true" type="quantity" value="19" timestamp="2025-02-26 03:46:51 -0500">
				<option key="--search-order" value="1"/>
				<details>19</details>
			</result>
		</query>
		<query>
			<formula>sup: time_between_idle</formula>
			<comment/>
			<result outcome="maybe_true" type="quantity" value="199" timestamp="2025-02-26 03:47:01 -0500">
				<option key="--search-order" value="1"/>
				<details>199</details>
			</result>
		</query>
	</queries>
</nta>
